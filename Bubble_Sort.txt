# Bubble Sort Implementation for IITK MINI-MIPS
# Sorts an array of integers in ascending order
# Array starts at memory address 0x1000 (4096)
# Array size: 8 elements

# Assembly Code:
# Register Usage:
# $t0 - array base address (0x1000)
# $t1 - array size (8)
# $t2 - outer loop counter (i)
# $t3 - inner loop counter (j)
# $t4 - array[j] value
# $t5 - array[j+1] value
# $t6 - temporary for address calculation
# $t7 - temporary for swapping

        # Initialize array base address and size
        addi $t0, $zero, 4096      # array base address = 0x1000
        addi $t1, $zero, 8         # array size = 8
        addi $t2, $zero, 0         # i = 0 (outer loop counter)

outer_loop:
        # Check if i < n-1
        addi $t6, $t1, -1          # t6 = n-1 = 7
        bgte $t2, $t6, end_sort    # if i >= n-1, exit
        
        addi $t3, $zero, 0         # j = 0 (inner loop counter)

inner_loop:
        # Check if j < n-i-1
        sub $t6, $t1, $t2          # t6 = n - i
        addi $t6, $t6, -1          # t6 = n - i - 1
        bgte $t3, $t6, next_i      # if j >= n-i-1, go to next i
        
        # Calculate address of array[j]
        sll $t6, $t3, 2            # t6 = j * 4 (word offset)
        add $t6, $t0, $t6          # t6 = base + j*4
        lw $t4, 0($t6)             # load array[j]
        
        # Calculate address of array[j+1]
        addi $t7, $t3, 1           # t7 = j + 1
        sll $t7, $t7, 2            # t7 = (j+1) * 4
        add $t7, $t0, $t7          # t7 = base + (j+1)*4
        lw $t5, 0($t7)             # load array[j+1]
        
        # Compare array[j] and array[j+1]
        ble $t4, $t5, no_swap      # if array[j] <= array[j+1], no swap
        
        # Swap elements
        sw $t5, 0($t6)             # array[j] = array[j+1]
        sw $t4, 0($t7)             # array[j+1] = array[j]

no_swap:
        addi $t3, $t3, 1           # j++
        j inner_loop               # continue inner loop

next_i:
        addi $t2, $t2, 1           # i++
        j outer_loop               # continue outer loop

end_sort:
        # Sorting complete
        j end_sort                 # infinite loop (halt)

# Machine Code:
instr_mem[0]  = 32'b10000100000010000001000000000000; // addi $t0, $zero, 4096
instr_mem[1]  = 32'b10000100000010010000000000001000; // addi $t1, $zero, 8
instr_mem[2]  = 32'b10000100000010100000000000000000; // addi $t2, $zero, 0
instr_mem[3]  = 32'b10000101001011101111111111111111; // addi $t6, $t1, -1
instr_mem[4]  = 32'b10110001010011100000000000010111; // bgte $t2, $t6, 23 (end_sort)
instr_mem[5]  = 32'b10000100000010110000000000000000; // addi $t3, $zero, 0
instr_mem[6]  = 32'b00000001001010100111000000000011; // sub $t6, $t1, $t2
instr_mem[7]  = 32'b10000101110011101111111111111111; // addi $t6, $t6, -1
instr_mem[8]  = 32'b10110001011011100000000000001101; // bgte $t3, $t6, 13 (next_i)
instr_mem[9]  = 32'b00000000000010110111000000000100; // sll $t6, $t3, 2
instr_mem[10] = 32'b00000001000011100111000000000001; // add $t6, $t0, $t6
instr_mem[11] = 32'b10011001110011000000000000000000; // lw $t4, 0($t6)
instr_mem[12] = 32'b10000101011011110000000000000001; // addi $t7, $t3, 1
instr_mem[13] = 32'b00000000000011110111100000000100; // sll $t7, $t7, 2
instr_mem[14] = 32'b00000001000011110111100000000001; // add $t7, $t0, $t7
instr_mem[15] = 32'b10011001111011010000000000000000; // lw $t5, 0($t7)
instr_mem[16] = 32'b10111101100011010000000000000010; // ble $t4, $t5, 2 (no_swap)
instr_mem[17] = 32'b10011101101011100000000000000000; // sw $t5, 0($t6)
instr_mem[18] = 32'b10011101111011000000000000000000; // sw $t4, 0($t7)
instr_mem[19] = 32'b10000101011010110000000000000001; // addi $t3, $t3, 1
instr_mem[20] = 32'b01000100000000000000000000000110; // j 6 (inner_loop)
instr_mem[21] = 32'b10000101010010100000000000000001; // addi $t2, $t2, 1
instr_mem[22] = 32'b01000100000000000000000000000011; // j 3 (outer_loop)
instr_mem[23] = 32'b01000100000000000000000000010111; // j 23 (end_sort)

# Sample Input Data (to be loaded in data memory starting at address 0x1000):
# data_mem[1024] = 32'd64;    // array[0] = 64
# data_mem[1025] = 32'd34;    // array[1] = 34
# data_mem[1026] = 32'd25;    // array[2] = 25
# data_mem[1027] = 32'd12;    // array[3] = 12
# data_mem[1028] = 32'd22;    // array[4] = 22
# data_mem[1029] = 32'd11;    // array[5] = 11
# data_mem[1030] = 32'd90;    // array[6] = 90
# data_mem[1031] = 32'd88;    // array[7] = 88

# Expected Output (after sorting):
# data_mem[1024] = 32'd11;    // array[0] = 11
# data_mem[1025] = 32'd12;    // array[1] = 12
# data_mem[1026] = 32'd22;    // array[2] = 22
# data_mem[1027] = 32'd25;    // array[3] = 25
# data_mem[1028] = 32'd34;    // array[4] = 34
# data_mem[1029] = 32'd64;    // array[5] = 64
# data_mem[1030] = 32'd88;    // array[6] = 88
# data_mem[1031] = 32'd90;    // array[7] = 90
